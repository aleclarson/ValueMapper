// Generated by CoffeeScript 1.11.1
var Either, NamedFunction, ValueMapper, assertType, defineAll, defineEach, isType;

NamedFunction = require("NamedFunction");

assertType = require("assertType");

Either = require("Either");

isType = require("isType");

ValueMapper = NamedFunction("ValueMapper", function(values, defineValue) {
  assertType(values, Either(Object, Function));
  assertType(defineValue, Function);
  if (isType(values, Function)) {
    return defineAll(values, defineValue);
  } else {
    return defineEach(values, defineValue);
  }
});

defineAll = function(createValues, defineValue) {
  return function(obj, args) {
    var key, value, values;
    values = createValues.apply(obj, args);
    if (!isType(values, Object)) {
      throw TypeError("Must return an Object!");
    }
    for (key in values) {
      value = values[key];
      defineValue(obj, key, value);
    }
  };
};

defineEach = function(values, defineValue) {
  return function(obj, args) {
    var key, value;
    for (key in values) {
      value = values[key];
      if (isType(value, Function)) {
        if (value.length) {
          value = value.apply(obj, args);
        } else {
          value = value.call(obj);
        }
      }
      defineValue(obj, key, value);
    }
  };
};

module.exports = ValueMapper;
